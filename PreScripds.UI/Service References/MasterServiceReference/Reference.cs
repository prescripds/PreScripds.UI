//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PreScripds.UI.MasterServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MasterServiceReference.IMasterService")]
    public interface IMasterService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetPermission", ReplyAction="http://tempuri.org/IMasterService/GetPermissionResponse")]
        PreScripds.Domain.Permission[] GetPermission();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetPermission", ReplyAction="http://tempuri.org/IMasterService/GetPermissionResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Permission[]> GetPermissionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetCountry", ReplyAction="http://tempuri.org/IMasterService/GetCountryResponse")]
        PreScripds.Domain.Master.Country[] GetCountry();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetCountry", ReplyAction="http://tempuri.org/IMasterService/GetCountryResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Master.Country[]> GetCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetState", ReplyAction="http://tempuri.org/IMasterService/GetStateResponse")]
        PreScripds.Domain.Master.State[] GetState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetState", ReplyAction="http://tempuri.org/IMasterService/GetStateResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Master.State[]> GetStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IMasterService/GetSecurityQuestionResponse")]
        PreScripds.Domain.Master.SecurityQuestion[] GetSecurityQuestion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMasterService/GetSecurityQuestion", ReplyAction="http://tempuri.org/IMasterService/GetSecurityQuestionResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Master.SecurityQuestion[]> GetSecurityQuestionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMasterServiceChannel : PreScripds.UI.MasterServiceReference.IMasterService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MasterServiceClient : System.ServiceModel.ClientBase<PreScripds.UI.MasterServiceReference.IMasterService>, PreScripds.UI.MasterServiceReference.IMasterService {
        
        public MasterServiceClient() {
        }
        
        public MasterServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MasterServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MasterServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MasterServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PreScripds.Domain.Permission[] GetPermission() {
            return base.Channel.GetPermission();
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Permission[]> GetPermissionAsync() {
            return base.Channel.GetPermissionAsync();
        }
        
        public PreScripds.Domain.Master.Country[] GetCountry() {
            return base.Channel.GetCountry();
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Master.Country[]> GetCountryAsync() {
            return base.Channel.GetCountryAsync();
        }
        
        public PreScripds.Domain.Master.State[] GetState() {
            return base.Channel.GetState();
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Master.State[]> GetStateAsync() {
            return base.Channel.GetStateAsync();
        }
        
        public PreScripds.Domain.Master.SecurityQuestion[] GetSecurityQuestion() {
            return base.Channel.GetSecurityQuestion();
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Master.SecurityQuestion[]> GetSecurityQuestionAsync() {
            return base.Channel.GetSecurityQuestionAsync();
        }
    }
}
