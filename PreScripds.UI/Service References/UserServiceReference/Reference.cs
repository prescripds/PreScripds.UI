//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PreScripds.UI.UserServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        PreScripds.Domain.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUsers", ReplyAction="http://tempuri.org/IUserService/GetUsersResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        PreScripds.Domain.User AddUser(PreScripds.Domain.User model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.User> AddUserAsync(PreScripds.Domain.User model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByUsername", ReplyAction="http://tempuri.org/IUserService/GetUserByUsernameResponse")]
        PreScripds.Domain.User GetUserByUsername(string loginName, PreScripds.Domain.Enums.LoginType loginType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByUsername", ReplyAction="http://tempuri.org/IUserService/GetUserByUsernameResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.User> GetUserByUsernameAsync(string loginName, PreScripds.Domain.Enums.LoginType loginType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckEmailExists", ReplyAction="http://tempuri.org/IUserService/CheckEmailExistsResponse")]
        PreScripds.Domain.User CheckEmailExists(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckEmailExists", ReplyAction="http://tempuri.org/IUserService/CheckEmailExistsResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.User> CheckEmailExistsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckRoleExists", ReplyAction="http://tempuri.org/IUserService/CheckRoleExistsResponse")]
        bool CheckRoleExists(PreScripds.Domain.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckRoleExists", ReplyAction="http://tempuri.org/IUserService/CheckRoleExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckRoleExistsAsync(PreScripds.Domain.Role role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRole", ReplyAction="http://tempuri.org/IUserService/GetRoleResponse")]
        PreScripds.Domain.Role[] GetRole(long organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetRole", ReplyAction="http://tempuri.org/IUserService/GetRoleResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Role[]> GetRoleAsync(long organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddRole", ReplyAction="http://tempuri.org/IUserService/AddRoleResponse")]
        PreScripds.Domain.Role AddRole(PreScripds.Domain.Role model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddRole", ReplyAction="http://tempuri.org/IUserService/AddRoleResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Role> AddRoleAsync(PreScripds.Domain.Role model);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserHistory", ReplyAction="http://tempuri.org/IUserService/AddUserHistoryResponse")]
        PreScripds.Domain.UserHistory AddUserHistory(PreScripds.Domain.UserHistory userHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserHistory", ReplyAction="http://tempuri.org/IUserService/AddUserHistoryResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.UserHistory> AddUserHistoryAsync(PreScripds.Domain.UserHistory userHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrganization", ReplyAction="http://tempuri.org/IUserService/AddOrganizationResponse")]
        PreScripds.Domain.Organization AddOrganization(PreScripds.Domain.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrganization", ReplyAction="http://tempuri.org/IUserService/AddOrganizationResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Organization> AddOrganizationAsync(PreScripds.Domain.Organization organization);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetDepartment", ReplyAction="http://tempuri.org/IUserService/GetDepartmentResponse")]
        PreScripds.Domain.Department[] GetDepartment(long organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetDepartment", ReplyAction="http://tempuri.org/IUserService/GetDepartmentResponse")]
        System.Threading.Tasks.Task<PreScripds.Domain.Department[]> GetDepartmentAsync(long organizationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckOrganizationExist", ReplyAction="http://tempuri.org/IUserService/CheckOrganizationExistResponse")]
        bool CheckOrganizationExist(string orgName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/CheckOrganizationExist", ReplyAction="http://tempuri.org/IUserService/CheckOrganizationExistResponse")]
        System.Threading.Tasks.Task<bool> CheckOrganizationExistAsync(string orgName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserLogin", ReplyAction="http://tempuri.org/IUserService/UpdateUserLoginResponse")]
        void UpdateUserLogin(PreScripds.Domain.UserHistory userHistory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUserLogin", ReplyAction="http://tempuri.org/IUserService/UpdateUserLoginResponse")]
        System.Threading.Tasks.Task UpdateUserLoginAsync(PreScripds.Domain.UserHistory userHistory);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : PreScripds.UI.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<PreScripds.UI.UserServiceReference.IUserService>, PreScripds.UI.UserServiceReference.IUserService {
        
        public UserServiceClient() {
        }
        
        public UserServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PreScripds.Domain.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public PreScripds.Domain.User AddUser(PreScripds.Domain.User model) {
            return base.Channel.AddUser(model);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.User> AddUserAsync(PreScripds.Domain.User model) {
            return base.Channel.AddUserAsync(model);
        }
        
        public PreScripds.Domain.User GetUserByUsername(string loginName, PreScripds.Domain.Enums.LoginType loginType) {
            return base.Channel.GetUserByUsername(loginName, loginType);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.User> GetUserByUsernameAsync(string loginName, PreScripds.Domain.Enums.LoginType loginType) {
            return base.Channel.GetUserByUsernameAsync(loginName, loginType);
        }
        
        public PreScripds.Domain.User CheckEmailExists(string email) {
            return base.Channel.CheckEmailExists(email);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.User> CheckEmailExistsAsync(string email) {
            return base.Channel.CheckEmailExistsAsync(email);
        }
        
        public bool CheckRoleExists(PreScripds.Domain.Role role) {
            return base.Channel.CheckRoleExists(role);
        }
        
        public System.Threading.Tasks.Task<bool> CheckRoleExistsAsync(PreScripds.Domain.Role role) {
            return base.Channel.CheckRoleExistsAsync(role);
        }
        
        public PreScripds.Domain.Role[] GetRole(long organizationId) {
            return base.Channel.GetRole(organizationId);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Role[]> GetRoleAsync(long organizationId) {
            return base.Channel.GetRoleAsync(organizationId);
        }
        
        public PreScripds.Domain.Role AddRole(PreScripds.Domain.Role model) {
            return base.Channel.AddRole(model);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Role> AddRoleAsync(PreScripds.Domain.Role model) {
            return base.Channel.AddRoleAsync(model);
        }
        
        public PreScripds.Domain.UserHistory AddUserHistory(PreScripds.Domain.UserHistory userHistory) {
            return base.Channel.AddUserHistory(userHistory);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.UserHistory> AddUserHistoryAsync(PreScripds.Domain.UserHistory userHistory) {
            return base.Channel.AddUserHistoryAsync(userHistory);
        }
        
        public PreScripds.Domain.Organization AddOrganization(PreScripds.Domain.Organization organization) {
            return base.Channel.AddOrganization(organization);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Organization> AddOrganizationAsync(PreScripds.Domain.Organization organization) {
            return base.Channel.AddOrganizationAsync(organization);
        }
        
        public PreScripds.Domain.Department[] GetDepartment(long organizationId) {
            return base.Channel.GetDepartment(organizationId);
        }
        
        public System.Threading.Tasks.Task<PreScripds.Domain.Department[]> GetDepartmentAsync(long organizationId) {
            return base.Channel.GetDepartmentAsync(organizationId);
        }
        
        public bool CheckOrganizationExist(string orgName) {
            return base.Channel.CheckOrganizationExist(orgName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckOrganizationExistAsync(string orgName) {
            return base.Channel.CheckOrganizationExistAsync(orgName);
        }
        
        public void UpdateUserLogin(PreScripds.Domain.UserHistory userHistory) {
            base.Channel.UpdateUserLogin(userHistory);
        }
        
        public System.Threading.Tasks.Task UpdateUserLoginAsync(PreScripds.Domain.UserHistory userHistory) {
            return base.Channel.UpdateUserLoginAsync(userHistory);
        }
    }
}
